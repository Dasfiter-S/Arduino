/*
 * 6/20
 * TO DO: lower speeds on backwardsDrop to prevent any skidding.  Turn it into 2 part drop instead of angled.  1 backwards. 1 turn.
 *        servo timers?
 *        tweak correction algorithm
 *        find if backwards has the same motor ratios as forwards
 *        test drop 5's new code
 *        fuck with counter correct motor speeds to help against skidding?
 * 6/19
 * am going to try to use straighten(); for the backwardsDrop()
 * added openArm(bool leftArm, bool rightArm)
 * added a second mdSpeed and mdBrake... mdSpeed/mdBrake(float l, float r, long timeVal); so instead of adding another line doing delay(timeVal) you can just put it in the function.
 * restructured ring drops since they are very uniform.  Every left turn is both arms except 3 and 7.  So  ringDrop(bool leftDrop, bool rightDrop)
 * renamed mdCorrectForward->correctForward
 *   created counterCorrecting, moved the counterCorrection loop out of the sensor[2] if.
 *   in the drop #5 it keeps going forward past the drope site untill not correcting or counterCorrecting, then backs up that extra time.
 *   added correctForward(int line, long time).  This corrects forward for time milliseconds.  It also can compensate for a line off to the left or right that needs to be ignored.
 * renamed turnCheck() to isTurn()
 * renamed gotTurn() to handleTurn()
 * removed startingZone
 * removed unnecessary variables
 */

//6/18 BUGS
/* 
fix drop 5, if it corrects right before it gets way off
tweak correction algorithm

any way to make start sequence more reliable
drop 10 doesn't do ring drop (ring states are wrong)
*/

//6-17 TODO

//time how much time you lose with a correction
//testTimes to find out the time frame for counter corrections.  Find out if you should lower brake power on an offTrack
//tweak counter-correction values
//get timing track up and running.

//  6/17 BUGS
/*
special #5 has trouble going backwards  I CAN MAKE IT VARY BASED ON FRONT SENSORS. 
  -----#5 constantly dipping right
-----straighten is having trouble with lower motor speed (the slow down in state 4)
------forward delay is having trouble in state 2
*/

#include <Servo.h>
#include <EEPROM.h>
#include "DualVNH5019MotorShield.h"
#include "Timer.h"
DualVNH5019MotorShield md;
//=========================================STRUCTS=============================================================
#define none 0
#define left 1
#define right 2
#define both 3
//========================================SETTINGS======================================================
int mdFast = 400; //not near a turn
int mdSlow = 250; //near a turn
//========================================VARS======================================================
Servo servoL, servoR;
int servoSpeed = 40; // 1.29s per rotation; 12.91s for 10 rotations
int servoTime = 1260; // off by a fraction of a degree.
int servoStop = 92;

int sensorPins[5] = {11, 12,13,14,15};
bool sensor[5] = {false, false, false, false};
int numSensors=5;

int turnState = 0;  //quadrant 1| quadrant 2    | center 
int turnArray[12] = {left, none, left, left, right, right, right, left, left, none, left, none}; //1 = left, 0 straight, 2 right
int numTurns = 12;

unsigned long t =0;
Timer servoTimer;

int mdPower = mdFast; //full power for the motor
int mdRFlip = 1;
int mdLFlip = -1;
float mdLOffset = .93;//.98;//.915; //.8233 on May 5th in Ricardo's code; 
float mdROffset = 1;
//.78~ Offset for low power level

//SETUP=======================================================================================================
void setup() {
  Serial.begin(9600);
  initialize();
  //testSensors();
  //printAnalog();
  
  openArm(1,1);
  backwardsDrop();
  turnState = 0;
}

void backwardsDrop(){
  unsigned long counter0 = 0;
  unsigned long counter4 = 0;
  
  straighten();
  mdBrake(1,1, 30);
  mdSpeed(-1,-.35, 250);
  mdBrake(1,1, 50);
  ringDrop(1,0);
  mdSpeed(.645,1, 800);
  int counter = 0;
  while(counter<4){
    readSensor(4);
    if(sensor[4]) counter++;
    else counter = 0;
  }
  mdSpeed(1,1, 50);

}
void initialize(){
  md.init();
  servoL.attach(32);
  servoR.attach(34);
  stopServos();
  mdPower = mdFast;
}

void waitTillPlacedOnTrack(){
  int count = 0;
  while(1){  
    readSensor(4);
    if(!sensor[4]){
      readSensor(0);
      readSensor(2);
      if(sensor[2] and !sensor[0]){
        if(count>4){
          Serial.println("on track, starting code");
          break;
        }
        else count++;
      }
    }
    delay(100);
  }
}


//MAIN LOOP===================================================================================================
//timer, every XXms it is running mdCorrectmdSpeed(1, 1) and after XXms runs startTurnChecks (when it is close to a turn)
void loop() {
  readSensors();
  if(isTurn()){
    handleTurn();
    readSensors();
  }
  correctForward();
}

bool isTurn() {
  if (!sensor[0] and sensor[3] and sensor[4]) {   //0--11
      return true;
  }
  else if (sensor[0] and sensor[1] and !sensor[4]) {   //11--0
      return true;
  }
  else if (sensor[0] and sensor[2] and sensor[4]) {   //1-1-1 second time we encounter this it has to be a right turn
      return true;
  }
  return false;
}

bool leftS = false;
bool rightS = false;
bool correcting = true;
bool counterCorrecting = false;
bool offTrack = false;
unsigned long sTime = 0;
unsigned long endTime = 0;


void correctForward(int line, int timeVal){
  /* correcting forward for a set amount of time
   * if left or right is in the argument then the sensor readings adjust for a line coming off from the left or right that needs to be ignored
   */
  t = millis()+timeVal;
  if(line == left){
    while(t>millis()){
      readSensors();
      //there is a line on the left side, so count the left sensor as not the other 2
      if(!sensor[2] and !sensor[3]) sensor[1] = true;
      else sensor[1] = false;
      correctForward();
    }
  }
  else if(line == right){
    while(t>millis()){
      readSensors();
      //there is a line on the right side, so count the right sensor as not the other 2
      if(!sensor[2] and !sensor[1]) sensor[3] = true;
      else sensor[3] = false;
      correctForward();
    }
  }
  else if(line == none){
    while(t>millis()){
      readSensors();
      correctForward();
    }
  }
}

void correctForward(){
  /*FALLOW STRAIGHT ON THE LINE
   * NEEDS readSensors() called beforehand
   * 
   * If sensor[1] is reading turn sharp right
   * if sensor[3] is reading turn sharp left
   * if sensor[2] is reading counter correct from sensor[1]/[3] then go straight
   * 
   * if no sensor is reading and the robot is not arcing back onto the line from sensor[1]/[3] then turn right then left to try to re-find the line
   */
  //moved counter correction out of if(sensor[2])
  if(counterCorrecting){
    if(sTime>millis()){
      if(!sensor[2]){
        counterCorrecting = false;
        mdSpeed(1,1);
        sTime = 0;
      }
    }
    else{
      counterCorrecting = false;
      mdSpeed(1,1);
      sTime = 0;
    }
  }
  else if(sensor[1] and !sensor[3]){
    if(!leftS){
      sTime = millis();
      if(offTrack) offTrack = false;
      leftS = true;
      rightS = false;
      correcting = true;
      mdSpeed(1,1);
      mdBrake(1,0);
    }
  }
  else if(sensor[3]){
    if(!rightS){
      sTime = millis();
      if(offTrack) offTrack = false;
      leftS = false;
      rightS = true;
      correcting = true;
      mdSpeed(1,1);
      mdBrake(0,1);
    }
  }
  else if(sensor[2] or (sensor[1] and sensor[3])){
    if(!correcting) return;
    mdSpeed(1,1);
    
    if(sTime!=0){
      //if sTime is small then counter sharper
      if(leftS) mdBrake(0,1);
      else if(rightS) mdBrake(1,0);
      
      sTime = millis()-sTime;
      //Serial.print("CorrectMild: ");
      //Serial.println(sTime);
      if(sTime>120) sTime = 120;
      if(sTime>50){
        sTime=75*(sTime-35)/80+millis();
        counterCorrecting = true;
      }
    }
    leftS = false;
    rightS = false;
    correcting = false;
  }
  else if(rightS){
    //Serial.println("OFF TRACK RIGHT");
  }
  else if(leftS){
    //Serial.println("OFF TRACK LEFT");
  }
  else {
    //delay for 100 then turn left for 300 ms, if didn't find line, turn right for 500ms
    if(!offTrack){
      offTrack = true;
      sTime = millis();
    }
    else{
      if(sTime+100>millis()){
        //do nothing
      }
      else if(sTime+400>millis()){
        mdSpeed(1,0);
        mdBrake(0,1);
      }
      else if(sTime+900>millis()){
        mdSpeed(0,1);
        mdBrake(1,0);
      }
    }
  }
}

void resetCorrectionVars(){
  /* reset all the correctForward variables after a turn is completed
   *  
   */
  rightS = false;
  leftS = false;
  correcting = true;
  counterCorrecting = false;
  offTrack = false;
  sTime = 0;
}

void handleTurn() {
  
  if (turnState == (numTurns-1)) {
    //FINISHED TRACK
    mdSpeed(1, .8, 550);
    mdBrake(1, 1, 1000000);
  }
  else if (turnArray[turnState] == none) {
    //go forward
    correctForward(left, 90);
  }
  else if (turnArray[turnState] == left) {
    mdBrake(1, 1, 100);
    straighten();
    if(turnState !=3 and turnState !=7) ringDrop(1,1);
    else ringDrop(0,1);
    mdLeftTurn(420);
    if(turnState==3) mdPower = mdSlow;
  }
  else if (turnArray[turnState] == right){
    if(turnState == 4) mdPower = mdFast;
    if(turnState == 5){
      //correct forward past the line
      correctForward(right, 120);
      //finish the current correction/counterCorrection
      t = millis();
      while(!correcting and !counterCorrecting){
        correctForward();
      }
      //go backwards a lil to compensate
      t = millis()-t;
      mdBrake(1, 1, 50);
      mdSpeed(-.7,-.7, t);
      mdBrake(1,1, 50);
      ringDrop(1,0);
      mdSpeed(-1, -1, 240);     
      mdSpeed(-.5,-.5, 50);
      mdBrake(1,1, 80);
    }
    else {
      mdRightTurn(420);
    }
    //Serial.println("Right Path called");
  }
  else {
    mdBrake(1, 1, 1000000);
  }
  turnState++;
  int counter = 0;
  while(counter<4){
    readSensor(2);
    if(sensor[2]) counter++;
    else counter = 0;
  }
  resetCorrectionVars();
}

void straighten(){
  /*if at the end of a line and at a left turn, this will bring the robot back onto the line and straighten up
   * 
   */
  mdSpeed(-.3,-.3);
  //backwardSlow();
  int count0 = 0;
  int count1 = 0;
  while(1){
    readSensor(0);
    readSensor(1);
    if(sensor[0]){
      if(count1 != 0) break;
      count0++;
    }
    else if(sensor[1]){
      if(count0 != 0) break;
      count1++;
    }
    delay(1);
  }
  if(count0!=0){
    if(count0>5){
      pivotRight(count0*3);
    }
    else pivotRight(count0*2);
  }
  else{
    if(count1>5){
      pivotLeft(count1*3);
    }
    else pivotLeft(count1*2);
  }
  mdBrake(1, 1);
}
//EEPROM======================================================================================================
void EEPROMWritelong(int address, long value)
{
  //Decomposition from a long to 4 bytes by using bitshift.
  //One = Most significant -> Four = Least significant byte
  byte four = (value & 0xFF);
  byte three = ((value >> 8) & 0xFF);
  byte two = ((value >> 16) & 0xFF);
  byte one = ((value >> 24) & 0xFF);
  
  //Write the 4 bytes into the eeprom memory.
  EEPROM.write(address, four);
  EEPROM.write(address + 1, three);
  EEPROM.write(address + 2, two);
  EEPROM.write(address + 3, one);
}

long EEPROMReadlong(long address)
{
  //Read the 4 bytes from the eeprom memory.
  long four = EEPROM.read(address);
  long three = EEPROM.read(address + 1);
  long two = EEPROM.read(address + 2);
  long one = EEPROM.read(address + 3);
  
  //Return the recomposed long by using bitshift.
  return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
}
//===========================================RING DROP
void stopServos() {
  servoL.write(95);
  delay(10);
  servoR.write(95);
  delay(10);
}
void rotateLeft() {
  servoL.write(servoSpeed);
}
void rotateRight() {
  servoR.write(servoSpeed);
}

void ringDrop(bool leftServo, bool rightServo) {
  if (rightServo) rotateRight();
  if (leftServo) rotateLeft();
  delay(servoTime);
  stopServos();
}

void openArm(bool leftServo, bool rightServo){
  if (rightServo) rotateRight();
  if (leftServo) rotateLeft();
  delay(servoTime/2);
  stopServos();
  mdSpeed(1,-.1, 15); //counters the jitter from opening the arm
}
//===========================================SENSORS===========================
void printSensors(){
  for(int i=0;i<numSensors;i++){
    Serial.print(sensor[i]);
  }
  Serial.println("");
}
void readSensor(int num){
  if(num<numSensors) sensor[num] = sensorState(sensorPins[num]);
  else {
    Serial.print("INVALID SENSORS NUM:");
    Serial.print(num);
  }
}
//read everything
void readSensors(){
  for(int i=0;i<numSensors;i++){
    sensor[i] = sensorState(sensorPins[i]);
  }
}
void printAnalog(){
  while(1){
    for(int i=0;i<numSensors;i++){
      Serial.print(analogRead(sensorPins[i]));
      Serial.print(":");
    }
    Serial.println();
    delay(200);
  }
}

bool sensorState(int sensorIn){
  //resetSensor(sensorIn);
  if(analogRead(sensorIn)>500){     // Pin is not getting reflection, which means it is on the black line
    return true;
  }
  else{
    return false;
  }
}

//=============================================MOTOR FUNCTIONS==========================================
//v signals how much power should go to the Right or Left engine.  Usually set to (-.05)->(.7) starting a turn or mild correction.
void pivotRight(long timeVal){
  mdSpeed(.7, -.5);
  delay(timeVal);
}
void pivotLeft(long timeVal){
  mdSpeed(-.5, .7);
  delay(timeVal);
}

void mdRightTurn(long timeVal) {
  mdSpeed(1, -.1);
  delay(timeVal);
}
void mdLeftTurn(long timeVal) {
  mdSpeed(-.05, 1);
  delay(timeVal);
}
void mdSpeed(float l, float r){
  md.setM1Speed(mdRFlip*mdPower*mdROffset*r);
  md.setM2Speed(mdLFlip*(mdPower*mdLOffset)*l);
}
void mdSpeed(float l, float r, long timeVal){
  mdSpeed(l,r);
  delay(timeVal);
}
void mdBrake(float l, float r){
  if(l!=0)  md.setM2Brake(400*l);
  if(r!=0) md.setM1Brake(400*r);
}
void mdBrake(float l, float r, long timeVal){
  mdBrake(l,r);
  delay(timeVal);
}

void testSensors(){
  while(1){
    readSensors();
    printSensors();
    delay(200);
  }
}

void testStraight(){
  while(1){
    mdSpeed(1,1);
    delay(1000);
    mdBrake(1,0);
    delay(400);
    mdSpeed(1,1);
    mdBrake(0,1);
    delay(400);
    mdBrake(1,1);
    delay(50000);
  }
}
